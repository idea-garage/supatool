import * as fs from 'fs';
import * as path from 'path';
import { diffLines } from 'diff';

/**
 * DDL差分からALTER TABLE文を生成
 */
function generateAlterStatements(tableName: string, fromDdl: string, toDdl: string): string[] {
  const statements: string[] = [];
  const diff = diffLines(fromDdl, toDdl);
  
  // デバッグ情報削除 - シンプルな表示
  
  // カラム名変更の検出用
  const removedColumns: Array<{name: string, definition: string}> = [];
  const addedColumns: Array<{name: string, definition: string}> = [];
  
  for (const part of diff) {
    if (part.added) {
      // 追加された行をALTER TABLE文に変換
      const lines = part.value.split('\n').filter(line => line.trim());
      for (const line of lines) {
        const trimmed = line.trim();
        
        // カラム定義の追加を検出
        if (trimmed.includes('  ') && !trimmed.startsWith('CREATE') && !trimmed.startsWith('PRIMARY') && !trimmed.startsWith('CONSTRAINT')) {
          const columnDef = trimmed.replace(/,$/, '').trim();
          const columnMatch = columnDef.match(/^(\w+)\s+(.+)$/);
          if (columnMatch) {
            const columnName = columnMatch[1];
            const columnType = columnMatch[2];
            addedColumns.push({ name: columnName, definition: columnType });
          }
        }
      }
    } else if (part.removed) {
      // 削除された行をALTER TABLE文に変換  
      const lines = part.value.split('\n').filter(line => line.trim());
      for (const line of lines) {
        const trimmed = line.trim();
        
        // カラム定義の削除を検出
        if (trimmed.includes('  ') && !trimmed.startsWith('CREATE') && !trimmed.startsWith('PRIMARY') && !trimmed.startsWith('CONSTRAINT')) {
          const columnDef = trimmed.replace(/,$/, '').trim();
          const columnMatch = columnDef.match(/^(\w+)\s+(.+)$/);
          if (columnMatch) {
            const columnName = columnMatch[1];
            const columnType = columnMatch[2];
            removedColumns.push({ name: columnName, definition: columnType });
          }
        }
      }
    }
  }
  
  // カラム名変更の検出（型定義が同じで名前が違う場合）
  const renames: Array<{from: string, to: string}> = [];
  
  for (const removed of removedColumns) {
    const matching = addedColumns.find(added => added.definition === removed.definition);
    if (matching) {
      renames.push({ from: removed.name, to: matching.name });
      // 処理済みとしてマーク
      removedColumns.splice(removedColumns.indexOf(removed), 1);
      addedColumns.splice(addedColumns.indexOf(matching), 1);
    }
  }
  
  // デバッグログ削除 - シンプルな表示
  
  // RENAME COLUMN文を生成
  for (const rename of renames) {
    statements.push(`ALTER TABLE ${tableName} RENAME COLUMN ${rename.from} TO ${rename.to};`);
  }
  
  // 残りの削除されたカラム
  for (const removed of removedColumns) {
    statements.push(`ALTER TABLE ${tableName} DROP COLUMN ${removed.name};`);
  }
  
  // 残りの追加されたカラム
  for (const added of addedColumns) {
    statements.push(`ALTER TABLE ${tableName} ADD COLUMN ${added.name} ${added.definition};`);
  }
  
  return statements;
}

/**
 * マイグレーションファイルを生成
 */
export async function generateMigrationFile(
  tableName: string, 
  fromDdl: string, 
  toDdl: string,
  projectDir: string = '.'
): Promise<string | null> {
  const migrationDir = path.join(projectDir, 'supabase', 'migrations');
  
  // migrations ディレクトリを作成
  if (!fs.existsSync(migrationDir)) {
    fs.mkdirSync(migrationDir, { recursive: true });
  }
  
  // ALTER TABLE文を生成
  const alterStatements = generateAlterStatements(tableName, fromDdl, toDdl);
  
  if (alterStatements.length === 0) {
    return await generateManualMigrationTemplate(tableName, fromDdl, toDdl, projectDir);
  }
  
  // タイムスタンプでファイル名を生成
  const now = new Date();
  const timestamp = now.toISOString()
    .replace(/[-:]/g, '')
    .replace(/\..+/, '')
    .replace('T', '');
  
  const filename = `${timestamp}_update_${tableName}.sql`;
  const filepath = path.join(migrationDir, filename);
  
  // マイグレーションファイルの内容を生成
  const content = `-- Migration generated by supatool
-- Table: ${tableName}
-- Generated at: ${now.toISOString()}

${alterStatements.join('\n')}
`;
  
  // ファイルを書き込み
  fs.writeFileSync(filepath, content, 'utf-8');
  
  console.log(`マイグレーションファイル生成: ${filename}`);
  
  return filepath;
}

/**
 * DDLからカラム定義を抽出
 */
function extractColumns(ddl: string): Array<{name: string, definition: string}> {
  const columns: Array<{name: string, definition: string}> = [];
  
  // CREATE TABLE部分を抽出
  const createTableMatch = ddl.match(/CREATE TABLE[^(]*\((.*)\);?/is);
  if (!createTableMatch) {
    return columns;
  }
  
  const tableContent = createTableMatch[1];
  
  // カラム定義とCONSTRAINTを分離
  const parts = tableContent.split(',').map(part => part.trim());
  
  for (const part of parts) {
    // CONSTRAINTやPRIMARY KEYは除外
    if (part.match(/^(PRIMARY|CONSTRAINT|UNIQUE|FOREIGN|CHECK)/i)) {
      continue;
    }
    
    // カラム名とデータ型を分離
    const columnMatch = part.trim().match(/^([a-zA-Z_][a-zA-Z0-9_]*)\s+(.+)$/);
    if (columnMatch) {
      const columnName = columnMatch[1];
      const columnType = columnMatch[2];
      columns.push({ name: columnName, definition: columnType });
    }
  }
  
  return columns;
}

/**
 * 差分からカラム変更を解析
 */
function analyzeDiffForTemplate(fromDdl: string, toDdl: string): {
  removedColumns: Array<{name: string, definition: string}>;
  addedColumns: Array<{name: string, definition: string}>;
} {
  // 各DDLからカラムを抽出
  const fromColumns = extractColumns(fromDdl);
  const toColumns = extractColumns(toDdl);
  
  // 削除されたカラム（FROMにあってTOにない）
  const removedColumns = fromColumns.filter(fromCol => 
    !toColumns.some(toCol => toCol.name === fromCol.name)
  );
  
  // 追加されたカラム（TOにあってFROMにない）
  const addedColumns = toColumns.filter(toCol => 
    !fromColumns.some(fromCol => fromCol.name === toCol.name)
  );
  
  return { removedColumns, addedColumns };
}

/**
 * 手動マイグレーションテンプレートを生成
 */
async function generateManualMigrationTemplate(
  tableName: string,
  fromDdl: string,
  toDdl: string,
  projectDir: string
): Promise<string | null> {
  const migrationDir = path.join(projectDir, 'supabase', 'migrations');
  
  if (!fs.existsSync(migrationDir)) {
    fs.mkdirSync(migrationDir, { recursive: true });
  }
  
  // 差分を解析
  const { removedColumns, addedColumns } = analyzeDiffForTemplate(fromDdl, toDdl);
  
  // タイムスタンプでファイル名を生成
  const now = new Date();
  const timestamp = now.toISOString()
    .replace(/[-:]/g, '')
    .replace(/\..+/, '')
    .replace('T', '');
  
  const filename = `${timestamp}_manual_update_${tableName}.sql`;
  const filepath = path.join(migrationDir, filename);
  
  // 実際の変更を基にテンプレートを生成
  let migrationStatements: string[] = [];
  
  // カラム名変更の可能性を検出
  const potentialRenames: Array<{from: string, to: string, definition: string}> = [];
  
  for (const removed of removedColumns) {
    const matching = addedColumns.find(added => added.definition === removed.definition);
    if (matching) {
      potentialRenames.push({ 
        from: removed.name, 
        to: matching.name,
        definition: removed.definition
      });
    }
  }
  
  // 残りの削除・追加
  const remainingRemoved = removedColumns.filter(r => 
    !potentialRenames.some(p => p.from === r.name)
  );
  const remainingAdded = addedColumns.filter(a => 
    !potentialRenames.some(p => p.to === a.name)
  );
  
  // テンプレート文を生成（DROP → ADD → RENAME の順序）
  if (remainingRemoved.length > 0) {
    migrationStatements.push('-- Column removals:');
    for (const removed of remainingRemoved) {
      migrationStatements.push(`ALTER TABLE ${tableName} DROP COLUMN ${removed.name};`);
    }
  }
  
  if (remainingAdded.length > 0) {
    if (migrationStatements.length > 0) migrationStatements.push('');
    migrationStatements.push('-- Column additions:');
    for (const added of remainingAdded) {
      migrationStatements.push(`ALTER TABLE ${tableName} ADD COLUMN ${added.name} ${added.definition};`);
    }
  }
  
  if (potentialRenames.length > 0) {
    if (migrationStatements.length > 0) migrationStatements.push('');
    migrationStatements.push('-- Possible column renames:');
    for (const rename of potentialRenames) {
      migrationStatements.push(`ALTER TABLE ${tableName} RENAME COLUMN ${rename.from} TO ${rename.to};`);
    }
  }
  
  // フォールバック: 何も検出されなかった場合
  if (migrationStatements.length === 0) {
    migrationStatements = [
      `-- Manual migration for ${tableName}`,
      `-- No specific changes detected, please edit manually`,
      ``,
      `-- ALTER TABLE ${tableName} RENAME COLUMN old_name TO new_name;`,
      `-- ALTER TABLE ${tableName} ADD COLUMN new_column TYPE;`,
      `-- ALTER TABLE ${tableName} DROP COLUMN old_column;`
    ];
  }
  
  const content = `-- Manual migration for ${tableName}
-- Edit this file and apply manually or using supabase CLI

${migrationStatements.join('\n')}
`;
  
  fs.writeFileSync(filepath, content, 'utf-8');
  
  console.log(`手動マイグレーションテンプレート生成: ${filename}`);
  
  return filepath;
}

/**
 * より高度な差分解析（カラム変更を検出）
 */
function analyzeColumnChanges(tableName: string, localDdl: string, remoteDdl: string): string[] {
  const statements: string[] = [];
  
  // 簡単な例：カラム名の変更を検出
  const localLines = localDdl.split('\n').map(line => line.trim()).filter(line => line);
  const remoteLines = remoteDdl.split('\n').map(line => line.trim()).filter(line => line);
  
  // カラムの型変更やデフォルト値変更などの高度な検出は今後実装
  // 現在は基本的な追加/削除のみ対応
  
  return statements;
} 